class K2KTest is subclass of MyTestCase

instance variables
	k2k : K2k := new K2k();
operations
	public createChain: () ==> ()
		createChain() == (
			k2k.addStore(new Store(1, "Porto", 100.0, 20));
			k2k.addStore(new Store(2, "Lagos", 150.50, 25));
			k2k.addStore(new Store(3, "Braganca", 115, 15));
			assertEqual(card k2k.getStores(), 3);
		);
	
	public clientSellTransaction: () ==> ()
		clientSellTransaction() == (
			dcl store : Store := new Store(4, "Lisboa", 100.0, 20);
			dcl oldBalance : real := store.getBalance();
			dcl oldTrans : seq of Transaction := store.getTransactions();
			dcl client : Client := new Client("Joana");
			dcl range1 : Product`Range := mk_Product`Range(10, 12, 'Y');
			dcl price1 : Product`Price := mk_Product`Price(7.50);
			dcl range2 : Product`Range := mk_Product`Range(8, 9, 'Y');
			dcl price2 : Product`Price := mk_Product`Price(17.0);
			dcl produto1 : Product := new Product(<toy>, range1, "zippa", "carro", price1, 'M');
			dcl produto2 : Product := new Product(<clothing>, range2, "zippu", "casaco", price2, 'M');
			dcl transactionSell : Transaction := new Transaction(client, store, {produto1, produto2}, <sell>);
			dcl dif : real := store.getBalance() - transactionSell.getValue();
			store.addTransaction(transactionSell);
			assertTrue(dif >= 0);
			assertEqual(store.getBalance(), oldBalance - transactionSell.getValue());
			assertEqual(store.getTransactions(), oldTrans ^ [transactionSell]); 
		);
		
	public clientBuyTransaction: () ==> ()
		clientBuyTransaction() == (
			dcl store : Store := new Store(5, "Braga", 100.0, 20);
			dcl inventory : set of Product := store.getInventory();
			dcl oldBalance : real := store.getBalance();
			dcl oldTrans : seq of Transaction := store.getTransactions();
			dcl client : Client := new Client("Alfredo");
			dcl range1 : Product`Range := mk_Product`Range(10, 12, 'M');
			dcl price1 : Product`Price := mk_Product`Price(7.50);
			dcl produto1 : Product := new Product(<toy>, range1, "zippa", "carro", price1, 'M');
			dcl transactionBuy : Transaction := new Transaction(client, store, {produto1}, <buy>);
			k2k.addStore(store);
			store.addToInv({produto1});
			assertEqual(k2k.getTransactions(store), []);
			store.addTransaction(transactionBuy);
			
			
			
			--assertTrue(transactionBuy.getProducts() subset inventory);
			assertEqual(store.getBalance(), oldBalance + transactionBuy.getValue());
			assertEqual(store.getTransactions(), oldTrans ^ [transactionBuy]); 
		);
		
		public storeMostSales: () ==> ()
			storeMostSales() == (
			
				dcl store1 : Store := new Store(6, "Porto", 350, 25);
				dcl store2 : Store := new Store(7, "Faro", 350, 25);
				dcl store3 : Store := new Store(8, "Lisboa", 350, 25);
				dcl inventory : set of Product := store1.getInventory();
				dcl client : Client := new Client("Alfredo");
				dcl client : Client := new Client("Joaquim");
				dcl client : Client := new Client("Fernando");
				dcl client : Client := new Client("Vitor");
				
				dcl range1 : Product`Range := mk_Product`Range(10, 12, 'Y');
				dcl price1 : Product`Price := mk_Product`Price(7.50);
				dcl produto1 : Product := new Product(<gear>, range1, "zippa", "carro", price1, 'M');
				
				dcl range2 : Product`Range := mk_Product`Range(10, 12, 'Y');
				dcl price2 : Product`Price := mk_Product`Price(10.50);
				dcl produto2 : Product := new Product(<toy>, range1, "zippa", "boneco", price2, 'M');
				
				dcl range3 : Product`Range := mk_Product`Range(10, 12, 'Y');
				dcl price3 : Product`Price := mk_Product`Price(19.99);
				dcl produto3 : Product := new Product(<toy>, range1, "zippa", "camisola", price3, 'M');
				
				dcl transactionBuy1 : Transaction := new Transaction(client, store1, {produto1}, <buy>);
				dcl transactionBuy2 : Transaction := new Transaction(client, store1, {produto2}, <buy>);
				dcl transactionBuy3 : Transaction := new Transaction(client, store2, {produto1}, <sell>);
				
				store1.addToInv({produto1, produto2, produto3});
				store2.addToInv({produto1, produto2, produto3});
				store3.addToInv({produto1, produto2, produto3});
					
				store1.addTransaction(transactionBuy1);
				store1.addTransaction(transactionBuy2);
				store2.addTransaction(transactionBuy3);	
				
				k2k.addStore(store1);
				k2k.addStore(store2);
				k2k.addStore(store3);
				
				assertEqual(k2k.mostSales(), {store1});
				assertEqual(k2k.mostBuys(), {store1});
				assertEqual(k2k.mostSells(), {store2});
				
	
			);
			
			public highestBalance : () ==> ()
				highestBalance() == (
					dcl store1 : Store := new Store(6, "Porto", 500, 25);
					dcl store2 : Store := new Store(7, "Faro", 350, 25);
					dcl store3 : Store := new Store(8, "Lisboa", 200, 25);
					
					k2k.addStore(store1);
					k2k.addStore(store2);
					k2k.addStore(store3);
					
					assertEqual(k2k.highestBalance(), {store1});
				
				);
				
				
				public bubbleSort : () ==> ()
				bubbleSort() == (
					dcl store1 : Store := new Store(6, "Porto", 200, 25);
					dcl store2 : Store := new Store(7, "Faro", 600, 25);
					dcl store3 : Store := new Store(8, "Lisboa", 300, 25);
					
					k2k.addStore(store1);
					k2k.addStore(store2);
					k2k.addStore(store3);
					
					assertEqual(k2k.balanceList(), [store2, store3, store1]);
				
				);
				
				
				public numBuysSellsAvg : () ==> ()
				numBuysSellsAvg() == (
					dcl store1 : Store := new Store(6, "Porto", 350, 25);
					dcl store2 : Store := new Store(7, "Faro", 350, 25);
					dcl store3 : Store := new Store(8, "Lisboa", 350, 25);
					dcl inventory : set of Product := store1.getInventory();
					dcl client : Client := new Client("Alfredo");
					dcl client : Client := new Client("Joaquim");
					dcl client : Client := new Client("Fernando");
					dcl client : Client := new Client("Vitor");
				
					dcl range1 : Product`Range := mk_Product`Range(10, 12, 'Y');
					dcl price1 : Product`Price := mk_Product`Price(7.50);
					dcl produto1 : Product := new Product(<toy>, range1, "zippa", "carro", price1, 'M');
				
					dcl range2 : Product`Range := mk_Product`Range(10, 12, 'Y');
					dcl price2 : Product`Price := mk_Product`Price(10.50);
					dcl produto2 : Product := new Product(<toy>, range1, "zippa", "boneco", price2, 'M');
				
					dcl range3 : Product`Range := mk_Product`Range(10, 12, 'Y');
					dcl price3 : Product`Price := mk_Product`Price(19.99);
					dcl produto3 : Product := new Product(<toy>, range1, "zippa", "camisola", price3, 'M');
					
					
					dcl range4 : Product`Range := mk_Product`Range(10, 12, 'Y');
					dcl price4 : Product`Price := mk_Product`Price(50);
					dcl produto4 : Product := new Product(<toy>, range1, "zippa", "camisola", price4, 'M');
				
					dcl transactionBuy1 : Transaction := new Transaction(client, store1, {produto1}, <buy>);
					dcl transactionBuy2 : Transaction := new Transaction(client, store1, {produto2}, <buy>);
					
					
					dcl transactionSell1 : Transaction := new Transaction(client, store2, {produto1}, <sell>);
					dcl transactionSell2 : Transaction := new Transaction(client, store2, {produto4}, <sell>);
					
				
					store1.addToInv({produto1, produto2, produto3, produto4});
					store2.addToInv({produto1, produto2, produto3, produto4});
					store3.addToInv({produto1, produto2, produto3, produto4});
					
					store1.addTransaction(transactionBuy1);
					store1.addTransaction(transactionBuy2);
					store2.addTransaction(transactionSell1);
					store2.addTransaction(transactionSell2);	
				
					k2k.addStore(store1);
					k2k.addStore(store2);
					k2k.addStore(store3);
					
					assertEqual(k2k.totalBuys(), 2);
					assertEqual(k2k.totalSells(), 2);
					
					assertEqual(k2k.avgBuy(store1), (7.50+10.5)/2 );
					assertEqual(k2k.avgSell(store2), (7.50+50)/2 );
					
			
				
				);
				
				
				public productSearch : () ==> ()
				productSearch() == (
					dcl store1 : Store := new Store(6, "Porto", 200, 25);
					dcl inventory : set of Product := store1.getInventory();
					
					dcl range1 : Product`Range := mk_Product`Range(5, 12, 'Y');
					dcl price1 : Product`Price := mk_Product`Price(7.50);
					dcl produto1 : Product := new Product(<toy>, range1, "zippa", "carro", price1, 'M');
				
					dcl range2 : Product`Range := mk_Product`Range(10, 12, 'Y');
					dcl price2 : Product`Price := mk_Product`Price(10.50);
					dcl produto2 : Product := new Product(<toy>, range1, "zippa", "boneco", price2, 'M');
				
					dcl range3 : Product`Range := mk_Product`Range(10, 12, 'Y');
					dcl price3 : Product`Price := mk_Product`Price(19.99);
					dcl produto3 : Product := new Product(<toy>, range1, "zippa", "camisola", price3, 'M');
					
					dcl results : map Store to Product:= {|->};
					results := results munion {store1 |-> produto1}; 
					
					store1.addToInv({produto1, produto2, produto3});
					
					k2k.addStore(store1);
					
					assertEqual(k2k.productSearch(<toy>, range1, "zippa", 'M'), results);
					
					
				);
				
				
			
				
	
		
	public static main: () ==> () 
	main() ==
   (
   	 new K2KTest().createChain();
   	 new K2KTest().clientSellTransaction();
   	 new K2KTest().clientBuyTransaction();
   	 new K2KTest().storeMostSales();
   	 new K2KTest().highestBalance();
   	 new K2KTest().bubbleSort();
   	 new K2KTest().numBuysSellsAvg();
   	 --new K2KTest().productSearch();
   	 
   	 
    );
		
end K2KTest