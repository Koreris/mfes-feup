class K2KTest is subclass of MyTestCase

instance variables
	k2k : K2k := new K2k();

operations
	-- creates the chain with several stores in different locations, 
	-- verifies if the total created corresponds to the length of the dinner pot
	public createChain: () ==> ()
		createChain() == (
			k2k.addStore(new Store(1, "Porto", 100.0, 20));
			k2k.addStore(new Store(2, "Lagos", 150.50, 25));
			k2k.addStore(new Store(3, "Braganca", 115, 15));
			assertEqual(card k2k.getStores(), 3);
		);
	
	-- tests the transaction sell of a client
	public clientSellTransaction: () ==> ()
		clientSellTransaction() == (
			dcl store : Store := new Store(4, "Lisboa", 100.0, 20);
			dcl oldBalance : real := store.getBalance();
			dcl oldTrans : seq of Transaction := store.getTransactions();
			dcl client : Client := new Client("Joana");
			dcl range1 : Product`Range := mk_Product`Range(10, 12, 'Y');
			dcl price1 : Product`Price := mk_Product`Price(7.50);
			dcl range2 : Product`Range := mk_Product`Range(8, 9, 'Y');
			dcl price2 : Product`Price := mk_Product`Price(17.0);
			dcl produto1 : Product := new Product(<toy>, range1, "zippa", "carro", price1, 'M');
			dcl produto2 : Product := new Product(<clothing>, range2, "zippu", "casaco", price2, 'M');
			dcl transactionSell : Transaction := new Transaction(client, store, {produto1, produto2}, <sell>);
			dcl dif : real := store.getBalance() - transactionSell.getValue();
			store.addTransaction(transactionSell);
			assertTrue(dif >= 0);
			assertEqual(store.getBalance(), oldBalance - transactionSell.getValue());
			assertEqual(store.getTransactions(), oldTrans ^ [transactionSell]); 
		);
		
	-- tests the transaction buy of a client
	public clientBuyTransaction: () ==> ()
		clientBuyTransaction() == (
			dcl store : Store := new Store(5, "Braga", 100.0, 20);
			dcl inventory : set of Product := store.getInventory();
			dcl oldBalance : real := store.getBalance();
			dcl oldTrans : seq of Transaction := store.getTransactions();
			dcl client : Client := new Client("Alfredo");
			dcl range1 : Product`Range := mk_Product`Range(10, 12, 'Y');
			dcl price1 : Product`Price := mk_Product`Price(7.50);
			dcl produto1 : Product := new Product(<toy>, range1, "zippa", "carro", price1, 'M');
			dcl transactionBuy : Transaction := new Transaction(client, store, {produto1}, <buy>);
			store.addToInv({produto1});
			store.addTransaction(transactionBuy);
			--assertTrue(transactionBuy.getProducts() subset inventory);
			assertEqual(store.getBalance(), oldBalance + transactionBuy.getValue());
			assertEqual(store.getTransactions(), oldTrans ^ [transactionBuy]); 
		);
		
	-- main entry point for the run configuration
	public static main: () ==> () 
	main() ==
   (
   	 new K2KTest().createChain();
   	 new K2KTest().clientSellTransaction();
   	 new K2KTest().clientBuyTransaction();
    );
		
end K2KTest