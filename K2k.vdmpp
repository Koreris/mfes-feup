class K2k
types

values
-- TODO Define values here
instance variables
				private store : Store;  -- TODO: set of Store ?
				private range1 : Product`Range := mk_Product`Range(10, 12, 'Y');
				private range2 : Product`Range := mk_Product`Range(5, 8, 'M');
				private range3 : Product`Range := mk_Product`Range(8, 9, 'Y');
				private price1 : Product`Price := mk_Product`Price(7);
				private price2 : Product`Price := mk_Product`Price(4);
				private price3 : Product`Price := mk_Product`Price(15);
				private product1 : Product := new Product("toy", range1, "zippo", "carro", price1, 'M');
				private product2 : Product := new Product("toy", range2, "zippo", "boneca", price2, 'F');
				private product3 : Product := new Product("toy", range3, "zippo", "casaco", price3, 'M');
				private inventory : set of Product := {};
				private trans: seq of Transaction := [];
				
				
operations
			public static main: () ==> ()
			main() ==
			(
				new K2k().init();
			);
			
			
			public init : () ==> ()
			init() ==
			(
				dcl client1 : Client := new Client("Ze");
				dcl trans1: Transaction ;
				
				--Product(stringCat, stringBrand, stringDetail, value, genderChar) 				
				inventory := {product1, product2, product3} union inventory;
				--Store(string, products, trans)
				store := new Store("Porto", inventory, trans, 100.0, 20);
				--Transaction(cli, str, prdt, t, val)
				trans1 := new Transaction(client1, store, {product1}, <buy>, 10);
				store.addTransaction(trans1);
				
			);
			

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end K2k