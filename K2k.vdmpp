class K2k
types

values
-- TODO Define values here
instance variables
				private stores : set of Store := {};
				inv not exists l1, l2 in set stores & 
						l1 <> l2 and l1.getID() = l2.getID(); 
				
operations
			public K2k: () ==> K2k
			K2k() == (
				stores := {};
			return self
			);
			
			public addStore : (Store) ==> ()
			addStore(store) == (
				stores := stores union {store}; 
			);
			
			public getStores : () ==> set of Store
			getStores() == (return stores);
			
			--returns the store(s) with the most total transactions
			public mostSales : () ==> set of Store
			mostSales() ==
			(
				dcl max : int := 0;
				dcl maxStores: set of Store := {};
				for all store in set stores do (
					if numTransactions(store) >= max then(
						if numTransactions(store) > max then(
							max := numTransactions(store);
							maxStores := {};
						);
						maxStores := {store} union maxStores;
					);
				);
				return maxStores;
			);
			
			--returns the store(s) with the most <buy> transactions
			public mostBuys : () ==> set of Store
			mostBuys() ==
			(
				dcl max : int := 0;
				dcl maxStores: set of Store := {};
				for all store in set stores do (
					if numBuys(store) >= max then(
						if numBuys(store) > max then(
							max := numBuys(store);
							maxStores := {};
						);
						maxStores := {store} union maxStores;
					);
				);
				return maxStores;
			);
			
			--returns the store(s) with the most <sell> transactions
			public mostSells : () ==> set of Store
			mostSells() ==
			(
				dcl max : int := 0;
				dcl maxStores: set of Store := {};
				for all store in set stores do (
					if numSells(store) >= max then(
						if numSells(store) > max then(
							max := numSells(store);
							maxStores := {};
						);
						maxStores := {store} union maxStores;
					);
				);
				return maxStores;
			);
			
			--returns the store(s) with the highest balance
			public highestBalance : () ==> set of Store
			highestBalance() ==
			(
				dcl max : real := 0;
				dcl maxStores: set of Store := {};
				for all store in set stores do (
					if store.getBalance() >= max then(
						if store.getBalance() > max then(
							max := store.getBalance();
							maxStores := {};
						);
						maxStores := {store} union maxStores;
					);
				);
				return maxStores;
			);
			
			--returns the number of transactions of a store
			public numTransactions : Store ==> int
			numTransactions(store) ==
			(
				return len store.getTransactions();
			);
			
			--returns stores ordered by balance (bubbleSort)
			public balanceList : () ==> seq of Store
			balanceList() ==
			(
					dcl sortedStores : seq of Store := [];
					
					for all store in set stores do(
						sortedStores := sortedStores ^ [store];
					);
					
					for i = len sortedStores to 1 by -1 do
						for j = 1 to i-1 do
							if sortedStores(j).getBalance() < sortedStores(j+1).getBalance()
								then (dcl temp:Store := sortedStores(j);
								sortedStores(j) := sortedStores(j+1);
								sortedStores(j+1) := temp
							);
					return sortedStores
				);
				
			--returns the number of <buy> of a store
			public numBuys : Store ==> int
			numBuys(store) ==
			(
				dcl num : int := 0;
				dcl transactions : seq of Transaction := store.getTransactions();
				
				for transaction in transactions do (
					if transaction.getType() = <buy> then
						num := num + 1;
				
				);
				return num;
			);
			
			--returns the number of <sell> of a store
			public numSells : Store ==> int
			numSells(store) ==
			(
				dcl num : int := 0;
				dcl transactions : seq of Transaction := store.getTransactions();
				
				for transaction in transactions do (
					if transaction.getType() = <sell> then
						num := num + 1;
				);
				return num;
			);
			
			--returns number of <buy> on entire chain
			public totalBuys : () ==> int
			totalBuys() ==
			(
				dcl num : int := 0;
				for all store in set stores do (
					num := num + numBuys(store);
				);
				return num;
			);
			
			--returns number of <sell> on entire chain
			public totalSells : () ==> int
			totalSells() ==
			(
				dcl num : int := 0;
				for all store in set stores do (
					num := num + numSells(store);
				);
				return num;
			);
			
			--returns transactions of a store
			public getTransactions : Store ==> seq of Transaction
			getTransactions(store) ==
			(
				return store.getTransactions();
			);
			
			--returns the average <buy> price of a store
			public avgBuy : Store ==> real
			avgBuy(store) ==
			(
				dcl avg : real := 0;
				dcl num : int := 0;
				dcl transactions : seq of Transaction := store.getTransactions();
				for transaction in transactions do (
					if transaction.getType() = <buy> then(
						num := num + 1;
						avg := avg + transaction.getValue();
					)
				);
				avg := avg / num;
				return avg;
			);
			
			--returns the average <sell> price of a store
			public avgSell : Store ==> real
			avgSell(store) ==
			(
				dcl avg : real := 0;
				dcl num : int := 0;
				dcl transactions : seq of Transaction := store.getTransactions();
				for transaction in transactions do (
					if transaction.getType() = <sell> then(
						num := num + 1;
						avg := avg + transaction.getValue();
					)
				
				);
				avg := avg / num;
				return avg;
			);
			
			public productSearch: Product`Category * Product`Range * Product`String * char ==> map Store to Product
			productSearch(cat, age, brand, gender) == (
			
			dcl results : map Store to Product:= {|->};

			for all store in set stores do(
				for all prdct in set store.getInventory() do(
					if(prdct.getCategory() = cat 
						and prdct.getAgeRange() = age
						and prdct.getBrand() = brand 
						and (prdct.getGender() = gender or prdct.getGender() = 'N'))
					then(
						results := results munion {store |-> prdct}; 
					)
				)
			);
			return results;
	)
	pre (cat <> nil
			and age <> mk_Product`Range(0,1,' ')
			and brand <> " "
			and gender <> ' ')
	;
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end K2k