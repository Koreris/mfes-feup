class Product

types
		-- a type that represents a String, by using a sequence of char
		public String = seq of char;
		
		-- a type to represent an age range, in the format A-BX, where A is the lower bound
		-- of the age range, B is the upper bound and X can be either Y (for years) or M (for
		-- months of age); the lower bound is always inferior to the upper bound, and in the
		-- of years the maximum is 17 (this is a kid focused store), and in case its months the
		-- maximum is 24. 
		public Range::
			lower: nat
			upper: nat1
			indicator: char
			inv range == range.lower < range.upper
			    and (range.upper < 18 and range.indicator = 'Y')
			    or (range.upper < 25 and range.indicator = 'M');
			    
		-- a type that represents a Price, which is always bigger from 0
		public Price:: 
			value: real
			inv price == price.value > 0;   
			
		-- a type that represents a category of the K2K products, which can be toys, clothing
		-- or gear
		public Category = <toy> | <clothing> | <gear> 
			inv category == category = <toy> or category = <clothing> or category = <gear>;   

instance variables
				private category : Category;
				private ageRange : Range;
				private brand : String;
				private detail : String;
				private price : Price;
				private gender : char;
				
operations
			-- CONSTRUCTOR
			public Product: Category * Range * String * String * Price * char ==> Product
				Product(cat, range, stringBrand, stringDetail, value, genderChar) == (
				category := cat;
				ageRange := range;
				brand := stringBrand;
				detail := stringDetail;
				price := value;
				gender := genderChar;
				return self);
			
			-- GETTERS
			public pure getCategory : () ==> Category
			getCategory() == return category;
			
			public pure getAgeRange : () ==> Range
			getAgeRange() == return ageRange;
			
			public pure getBrand : () ==> String
			getBrand() == return brand;
			
			public pure getDetail : () ==> String
			getDetail() == return detail;
			
			public pure getPrice : () ==> Price
			getPrice() == return price;
			
			public pure getGender : () ==> char
			getGender() == return gender;
			
			-- this operation sets the new price of items according to the store's margin
			public setPrice : real ==> ()
			setPrice(margin) == price.value := price.value+(price.value*margin);
				
end Product