class Product
types
		public String = seq of char;
		public Range::
			lower: nat
			upper: nat1
			indicator: char
			inv range == range.lower < range.upper
			    and (range.upper < 18 and range.indicator = 'Y')
			    or (range.upper < 25 and range.indicator = 'M');
		public Price:: 
			value: real
			inv price == price.value > 0;      
				
values
-- TODO Define values here
instance variables
				private category : String;
				private ageRange : Range;
				private brand : String;
				private detail : String;
				private price : Price;
				private gender : char; -- se category = clothing
				
operations
			public Product: String * Range * String * String * Price * char ==> Product
				Product(stringCat, range, stringBrand, stringDetail, value, genderChar) == (
				category := stringCat;
				ageRange := range;
				brand := stringBrand;
				detail := stringDetail;
				price := value;
				gender := genderChar;
				return self);
			
			-------------------------------------- GETTERS START
			public pure getCategory : () ==> String
			getCategory() == return category;
			
			public pure getAgeRange : () ==> Range
			getAgeRange() == return ageRange;
			
			public pure getBrand : () ==> String
			getBrand() == return brand;
			
			public pure getDetail : () ==> String
			getDetail() == return detail;
			
			public pure getPrice : () ==> Price
			getPrice() == return price;
			
			public pure getGender : () ==> char
			getGender() == return gender;
			-------------------------------------- GETTERS END
			
			public setPrice : real ==> ()
			setPrice(margin) == price.value := price.value+(price.value*margin);
				
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Product