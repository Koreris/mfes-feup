class Store

types
		-- a type that represents a String, by using a sequence of char
		public String = seq of char;

instance variables
		-- a store is characterised by an id, its location, its inventory (set of products), 
		-- its transactions, its balance and its margin
		private id : nat1;
		private location : String;
		private inventory : set of Product;
		private transactions: seq of Transaction;
		private balance: real;
		inv balance >= 0;
		private storeMargin : real;
		inv storeMargin > 0 and storeMargin < 100;
				
operations	
		-- CONSTRUCTOR
		public Store: nat1 * String * real * real ==> Store
		Store(storeid, string, bal, marg) == (
			id := storeid;
			location := string;
			inventory := {};
			transactions := [];
			balance := bal;
			storeMargin := marg;
			return self);
		
		-- operation to ADD A TRANSACTION and make sure all the constraints are respected
		-- if the transaction is of the type client buys, the balance is increased, the 
		-- transaction added to the store's seq of transactions, and the item removed from
		-- the inventory
		-- if the transaction is of the type client sells, then the transaction only occurs
		-- if the precondition that the balance has to be at least as high as the product's price
		-- is satisfied, and if so the product is then added to the inventory
		-- when a transaction occurs, the balance cant be the same as before the transaction, nor
		-- can the seq of transactions remain the same 
		public addTransaction: Transaction ==> ()
		addTransaction(trans) == (
		
			if trans.getType() = <buy> then(
						transactions := transactions ^ [trans];
						balance := balance + trans.getValue();
						removeFromInv(trans.getProducts());
					) 		
			else if trans.getType() = <sell> then(
				balance := balance - trans.getValue();
				transactions := transactions ^ [trans];
				for all p in set trans.getProducts() do (p.setPrice(storeMargin));
				addToInv(trans.getProducts());
			)
		)
		pre (balance - trans.getValue() >= 0 and 
				trans.getType() = <sell>) or
				(trans.getType() = <buy> and 
				trans.getProducts() subset inventory)
				
		post balance <> balance~ and 
				 transactions = transactions~ ^ [trans]
		;
		
		-- adds a set of product to inventory
		public addToInv : set of Product ==> ()
		addToInv(products) == (
			inventory := products union inventory;
		);
		
		-- removes a set of product to an inventory
		public removeFromInv : set of Product ==> ()
		removeFromInv(products) == (
			inventory := inventory \ products;
		);
		
		-- GETTERS
		public pure getLocation : () ==> String
			getLocation() == return location;
			
		public pure getTransactions : () ==> seq of Transaction
			getTransactions() == return transactions;
			
			
		public pure getBalance : () ==> real
			getBalance() == return balance;
			
		public pure getInventory : () ==> set of Product
			getInventory() == return inventory;
		
		public pure getID : () ==> nat1
			getID() == return id;
		
end Store